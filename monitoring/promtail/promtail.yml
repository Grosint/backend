server:
    http_listen_port: 9080
    grpc_listen_port: 0

positions:
    filename: /var/lib/promtail/positions.yaml

clients:
    - url: http://loki:3100/loki/api/v1/push

scrape_configs:
    # Grosint Backend Application Logs
    - job_name: 'grosint-app'
      static_configs:
          - targets: [localhost]
            labels:
                job: grosint-app
                host: ${HOSTNAME}
                app: backend
                __path__: /opt/grosint-backend/logs/app-*.log
      pipeline_stages:
          # Handle multiline logs (stack traces, exceptions)
          - multiline:
                firstline: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2} UTC'
                max_wait_time: 3s
                max_lines: 1000
          - json:
                expressions:
                    timestamp: timestamp
                    level: level
                    logger: logger
                    message: message
                    client_ip: client_ip
                    module: module
                    function: function
                    line: line
          - timestamp:
                source: timestamp
                format: RFC3339
          # Only use low-cardinality labels to prevent series explosion
          - labels:
                level: # Only ~5 values: DEBUG, INFO, WARNING, ERROR, CRITICAL
          # Group errors by type for better aggregation
          - regex:
                expression: '^(?P<error_type>\w+Error|Exception|Warning):'
                source: message
          - labels:
                error_type:
          # Keep high-cardinality data as fields (not labels) for querying
          - template:
                source: logger
                template: '{{ .Value }}'
          - template:
                source: client_ip
                template: '{{ .Value }}'
          - template:
                source: function
                template: '{{ .Value }}'
          - template:
                source: module
                template: '{{ .Value }}'
          - output:
                source: message

    # Nginx Access Logs (JSON format)
    - job_name: 'nginx-access'
      static_configs:
          - targets: [localhost]
            labels:
                job: nginx
                host: ${HOSTNAME}
                log_type: access
                __path__: /var/log/nginx/access*.log
      pipeline_stages:
          - json:
                expressions:
                    time: time
                    remote_addr: remote_addr
                    request: request
                    status: status
                    body_bytes_sent: body_bytes_sent
                    request_time: request_time
                    upstream_response_time: upstream_response_time
                    request_method: request_method
                    uri: uri
                    http_referrer: http_referrer
                    http_user_agent: http_user_agent
                    http_x_forwarded_for: http_x_forwarded_for
                    server_name: server_name
          - timestamp:
                source: time
                format: RFC3339
          # Use only low-cardinality labels for Nginx access logs
          - labels:
                status: # HTTP status codes (~20-30 values)
                request_method: # GET, POST, PUT, DELETE, etc. (~10 values)
          - regex:
                expression: '^(?P<method>\S+) (?P<path>\S+) (?P<protocol>\S+)'
                source: request
          # Don't use path as label (high cardinality) - keep as field
          - template:
                source: path
                template: '{{ .Value }}'
          - template:
                source: protocol
                template: '{{ .Value }}'
          - output:
                source: request

    # Nginx Error Logs
    - job_name: 'nginx-error'
      static_configs:
          - targets: [localhost]
            labels:
                job: nginx
                host: ${HOSTNAME}
                log_type: error
                __path__: /var/log/nginx/error*.log
      pipeline_stages:
          # Base fields from error log prefix
          - regex:
                expression: '^(?P<timestamp>\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}) \[(?P<level>\w+)\] (?P<pid>\d+)#(?P<tid>\d+): (?P<message>.*)'
          - timestamp:
                source: timestamp
                format: '2006/01/02 15:04:05'
          # Extract structured key/value pairs commonly appended by nginx
          - regex:
                expression: 'client: (?P<client>[^,]+)(?:, server: (?P<server>[^,]+))?(?:, request: "(?P<request>[^"]+)")?(?:, upstream: "(?P<upstream>[^"]+)")?(?:, host: "(?P<host>[^"]+)")?'
          # Optionally split request into method/path/protocol when present
          - regex:
                source: request
                expression: '^(?P<req_method>\S+) (?P<req_path>\S+) (?P<req_protocol>\S+)$'
          # Use only low-cardinality labels for Nginx error logs
          - labels:
                level: # error, warn, info, debug (~5 values)
                req_method: # GET, POST, etc. (~10 values)
          # Keep high-cardinality data as fields
          - template:
                source: pid
                template: '{{ .Value }}'
          - template:
                source: tid
                template: '{{ .Value }}'
          - template:
                source: server
                template: '{{ .Value }}'
          - template:
                source: client
                template: '{{ .Value }}'
          - template:
                source: host
                template: '{{ .Value }}'
          - output:
                source: message
